// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PlayerSkinAccessoriesConfigTemplateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PlayerSkinAccessoriesConfigTemplate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PlayerSkinAccessoriesConfigTemplate<'a> {
  type Inner = PlayerSkinAccessoriesConfigTemplate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PlayerSkinAccessoriesConfigTemplate<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_UNK_2: flatbuffers::VOffsetT = 8;
  pub const VT_UNK_3: flatbuffers::VOffsetT = 10;
  pub const VT_UNK_4: flatbuffers::VOffsetT = 12;
  pub const VT_UNK_5: flatbuffers::VOffsetT = 14;
  pub const VT_UNK_6: flatbuffers::VOffsetT = 16;
  pub const VT_UNK_7: flatbuffers::VOffsetT = 18;
  pub const VT_SKIN_ID: flatbuffers::VOffsetT = 20;
  pub const VT_UNK_9: flatbuffers::VOffsetT = 22;
  pub const VT_UNK_10: flatbuffers::VOffsetT = 24;
  pub const VT_UNK_11: flatbuffers::VOffsetT = 26;
  pub const VT_UNK_12: flatbuffers::VOffsetT = 28;
  pub const VT_UNK_13: flatbuffers::VOffsetT = 30;
  pub const VT_BONE_NAME: flatbuffers::VOffsetT = 32;
  pub const VT_UNK_15: flatbuffers::VOffsetT = 34;
  pub const VT_UNK_16: flatbuffers::VOffsetT = 36;
  pub const VT_UNK_17: flatbuffers::VOffsetT = 38;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 40;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PlayerSkinAccessoriesConfigTemplate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PlayerSkinAccessoriesConfigTemplateArgs<'args>
  ) -> flatbuffers::WIPOffset<PlayerSkinAccessoriesConfigTemplate<'bldr>> {
    let mut builder = PlayerSkinAccessoriesConfigTemplateBuilder::new(_fbb);
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.unk_17 { builder.add_unk_17(x); }
    builder.add_unk_16(args.unk_16);
    if let Some(x) = args.unk_15 { builder.add_unk_15(x); }
    if let Some(x) = args.bone_name { builder.add_bone_name(x); }
    if let Some(x) = args.unk_13 { builder.add_unk_13(x); }
    if let Some(x) = args.unk_12 { builder.add_unk_12(x); }
    if let Some(x) = args.unk_11 { builder.add_unk_11(x); }
    if let Some(x) = args.unk_10 { builder.add_unk_10(x); }
    builder.add_unk_9(args.unk_9);
    builder.add_skin_id(args.skin_id);
    builder.add_unk_7(args.unk_7);
    if let Some(x) = args.unk_6 { builder.add_unk_6(x); }
    if let Some(x) = args.unk_5 { builder.add_unk_5(x); }
    builder.add_unk_4(args.unk_4);
    builder.add_unk_3(args.unk_3);
    if let Some(x) = args.unk_2 { builder.add_unk_2(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(PlayerSkinAccessoriesConfigTemplate::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_NAME, None)}
  }
  #[inline]
  pub fn unk_2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_2, None)}
  }
  #[inline]
  pub fn unk_3(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_3, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_4(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_4, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_5(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_5, None)}
  }
  #[inline]
  pub fn unk_6(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_6, None)}
  }
  #[inline]
  pub fn unk_7(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_7, Some(0)).unwrap()}
  }
  #[inline]
  pub fn skin_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(PlayerSkinAccessoriesConfigTemplate::VT_SKIN_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_9(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_9, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_10(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_10, None)}
  }
  #[inline]
  pub fn unk_11(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_11, None)}
  }
  #[inline]
  pub fn unk_12(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_12, None)}
  }
  #[inline]
  pub fn unk_13(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_13, None)}
  }
  #[inline]
  pub fn bone_name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_BONE_NAME, None)}
  }
  #[inline]
  pub fn unk_15(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_15, None)}
  }
  #[inline]
  pub fn unk_16(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_16, Some(0)).unwrap()}
  }
  #[inline]
  pub fn unk_17(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_17, None)}
  }
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PlayerSkinAccessoriesConfigTemplate::VT_SOURCE, None)}
  }
}

impl flatbuffers::Verifiable for PlayerSkinAccessoriesConfigTemplate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_2", Self::VT_UNK_2, false)?
     .visit_field::<i32>("unk_3", Self::VT_UNK_3, false)?
     .visit_field::<i32>("unk_4", Self::VT_UNK_4, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_5", Self::VT_UNK_5, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_6", Self::VT_UNK_6, false)?
     .visit_field::<i32>("unk_7", Self::VT_UNK_7, false)?
     .visit_field::<u32>("skin_id", Self::VT_SKIN_ID, false)?
     .visit_field::<i32>("unk_9", Self::VT_UNK_9, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("unk_10", Self::VT_UNK_10, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_11", Self::VT_UNK_11, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_12", Self::VT_UNK_12, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_13", Self::VT_UNK_13, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("bone_name", Self::VT_BONE_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_15", Self::VT_UNK_15, false)?
     .visit_field::<i32>("unk_16", Self::VT_UNK_16, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unk_17", Self::VT_UNK_17, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .finish();
    Ok(())
  }
}
pub struct PlayerSkinAccessoriesConfigTemplateArgs<'a> {
    pub id: u32,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_3: i32,
    pub unk_4: i32,
    pub unk_5: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_6: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_7: i32,
    pub skin_id: u32,
    pub unk_9: i32,
    pub unk_10: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub unk_11: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_12: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_13: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bone_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_15: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unk_16: i32,
    pub unk_17: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PlayerSkinAccessoriesConfigTemplateArgs<'a> {
  #[inline]
  fn default() -> Self {
    PlayerSkinAccessoriesConfigTemplateArgs {
      id: 0,
      name: None,
      unk_2: None,
      unk_3: 0,
      unk_4: 0,
      unk_5: None,
      unk_6: None,
      unk_7: 0,
      skin_id: 0,
      unk_9: 0,
      unk_10: None,
      unk_11: None,
      unk_12: None,
      unk_13: None,
      bone_name: None,
      unk_15: None,
      unk_16: 0,
      unk_17: None,
      source: None,
    }
  }
}

pub struct PlayerSkinAccessoriesConfigTemplateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PlayerSkinAccessoriesConfigTemplateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(PlayerSkinAccessoriesConfigTemplate::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_NAME, name);
  }
  #[inline]
  pub fn add_unk_2(&mut self, unk_2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_2, unk_2);
  }
  #[inline]
  pub fn add_unk_3(&mut self, unk_3: i32) {
    self.fbb_.push_slot::<i32>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_3, unk_3, 0);
  }
  #[inline]
  pub fn add_unk_4(&mut self, unk_4: i32) {
    self.fbb_.push_slot::<i32>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_4, unk_4, 0);
  }
  #[inline]
  pub fn add_unk_5(&mut self, unk_5: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_5, unk_5);
  }
  #[inline]
  pub fn add_unk_6(&mut self, unk_6: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_6, unk_6);
  }
  #[inline]
  pub fn add_unk_7(&mut self, unk_7: i32) {
    self.fbb_.push_slot::<i32>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_7, unk_7, 0);
  }
  #[inline]
  pub fn add_skin_id(&mut self, skin_id: u32) {
    self.fbb_.push_slot::<u32>(PlayerSkinAccessoriesConfigTemplate::VT_SKIN_ID, skin_id, 0);
  }
  #[inline]
  pub fn add_unk_9(&mut self, unk_9: i32) {
    self.fbb_.push_slot::<i32>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_9, unk_9, 0);
  }
  #[inline]
  pub fn add_unk_10(&mut self, unk_10: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_10, unk_10);
  }
  #[inline]
  pub fn add_unk_11(&mut self, unk_11: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_11, unk_11);
  }
  #[inline]
  pub fn add_unk_12(&mut self, unk_12: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_12, unk_12);
  }
  #[inline]
  pub fn add_unk_13(&mut self, unk_13: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_13, unk_13);
  }
  #[inline]
  pub fn add_bone_name(&mut self, bone_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_BONE_NAME, bone_name);
  }
  #[inline]
  pub fn add_unk_15(&mut self, unk_15: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_15, unk_15);
  }
  #[inline]
  pub fn add_unk_16(&mut self, unk_16: i32) {
    self.fbb_.push_slot::<i32>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_16, unk_16, 0);
  }
  #[inline]
  pub fn add_unk_17(&mut self, unk_17: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_UNK_17, unk_17);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplate::VT_SOURCE, source);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PlayerSkinAccessoriesConfigTemplateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PlayerSkinAccessoriesConfigTemplateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PlayerSkinAccessoriesConfigTemplate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PlayerSkinAccessoriesConfigTemplate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PlayerSkinAccessoriesConfigTemplate");
      ds.field("id", &self.id());
      ds.field("name", &self.name());
      ds.field("unk_2", &self.unk_2());
      ds.field("unk_3", &self.unk_3());
      ds.field("unk_4", &self.unk_4());
      ds.field("unk_5", &self.unk_5());
      ds.field("unk_6", &self.unk_6());
      ds.field("unk_7", &self.unk_7());
      ds.field("skin_id", &self.skin_id());
      ds.field("unk_9", &self.unk_9());
      ds.field("unk_10", &self.unk_10());
      ds.field("unk_11", &self.unk_11());
      ds.field("unk_12", &self.unk_12());
      ds.field("unk_13", &self.unk_13());
      ds.field("bone_name", &self.bone_name());
      ds.field("unk_15", &self.unk_15());
      ds.field("unk_16", &self.unk_16());
      ds.field("unk_17", &self.unk_17());
      ds.field("source", &self.source());
      ds.finish()
  }
}
pub enum PlayerSkinAccessoriesConfigTemplateTbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PlayerSkinAccessoriesConfigTemplateTb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PlayerSkinAccessoriesConfigTemplateTb<'a> {
  type Inner = PlayerSkinAccessoriesConfigTemplateTb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PlayerSkinAccessoriesConfigTemplateTb<'a> {
  pub const VT_DATA: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PlayerSkinAccessoriesConfigTemplateTb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PlayerSkinAccessoriesConfigTemplateTbArgs<'args>
  ) -> flatbuffers::WIPOffset<PlayerSkinAccessoriesConfigTemplateTb<'bldr>> {
    let mut builder = PlayerSkinAccessoriesConfigTemplateTbBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    builder.finish()
  }


  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PlayerSkinAccessoriesConfigTemplate<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PlayerSkinAccessoriesConfigTemplate>>>>(PlayerSkinAccessoriesConfigTemplateTb::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for PlayerSkinAccessoriesConfigTemplateTb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PlayerSkinAccessoriesConfigTemplate>>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct PlayerSkinAccessoriesConfigTemplateTbArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PlayerSkinAccessoriesConfigTemplate<'a>>>>>,
}
impl<'a> Default for PlayerSkinAccessoriesConfigTemplateTbArgs<'a> {
  #[inline]
  fn default() -> Self {
    PlayerSkinAccessoriesConfigTemplateTbArgs {
      data: None,
    }
  }
}

pub struct PlayerSkinAccessoriesConfigTemplateTbBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PlayerSkinAccessoriesConfigTemplateTbBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PlayerSkinAccessoriesConfigTemplate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerSkinAccessoriesConfigTemplateTb::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PlayerSkinAccessoriesConfigTemplateTbBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PlayerSkinAccessoriesConfigTemplateTbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PlayerSkinAccessoriesConfigTemplateTb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PlayerSkinAccessoriesConfigTemplateTb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PlayerSkinAccessoriesConfigTemplateTb");
      ds.field("data", &self.data());
      ds.finish()
  }
}
